ru package.netology.Radioman.service;

org  import.junit.jupiter.api.Утверждения;
org import.junit.jupiter.api.Test;

Общедоступный  класс  RadioTest {

    @Тест
    shouldSetStationIfMoreMax  аннулирует  public() {
        радио -радио = новое  радио ();
        радиостанция.Настройка текущей станции(11);
        ожидаемый  результат = 0;
        фактический  int = radio.getCurrentStation();
        Утверждения.Значения утверждений (ожидаемые, фактические);
    }

    @Тест
    testNext  аннулирует  публичный() {

        радио -радио = новое  радио ();
        радиостанция.Настройка текущей станции(5);
        radio.next();
        ожидаемое  число = 6;
        фактический  int = radio.getCurrentStation();
        Утверждения.Значения утверждений (ожидаемые, фактические);
    }

    @Тест
    testNextElseMax  аннулирует  общедоступный() {

        радио -радио = новое  радио ();
        радиостанция.Настройка текущей станции(9);
        radio.next();
        ожидаемый  результат = 0;
        фактический  int = radio.getCurrentStation();
        Утверждения.Значения утверждений (ожидаемые, фактические);

    }

    @Тест
    testPrevElseMin  аннулирует  публичный доступ() {

        радио -радио = новое  радио ();
        radio.setCurrentStation(0);
        radio.prev();
        ожидаемое  число = 9;
        фактический  int = radio.getCurrentStation();
        Утверждения.Значения утверждений (ожидаемые, фактические);

    }

    @Тест
    testPrev  аннулирует  общедоступный() {

        радио -радио = новое  радио ();
        радиостанция.Настройка текущей станции(8);
        radio.prev();
        ожидаемое  число = 7;
        фактический  int = radio.getCurrentStation();
        Утверждения.Значения утверждений (ожидаемые, фактические);

    }

    @Тест
    testIncreaseVolume  аннулирует  общедоступный() {

        радио -радио = новое  радио ();
        радио.Установить текущий объем (7);
        радио.Увеличить объем ();
        ожидаемое  число = 8;
        фактический  int = radio.getCurrentVolume();
        Утверждения.Значения утверждений (ожидаемые, фактические);

    }

    @Тест
    Тест  увеличивает значение, если максимальное значение недействительно  для общественности() {

        радио -радио = новое  радио ();
        радио.Установить текущий объем (10);
        радио.Увеличить объем ();
        ожидаемое  число = 10;
        фактический  int = radio.getCurrentVolume();
        Утверждения.Значения утверждений (ожидаемые, фактические);

    }

    @Тест
    Testraduacevolume  аннулирует  общедоступный() {
        радио -радио = новое  радио ();
        радио.Установить текущий объем (10);
        радио.Уменьшить объем ();
        ожидаемое  число = 9;
        фактический  int = radio.getCurrentVolume();
        Утверждения.Значения утверждений (ожидаемые, фактические);
    }

    @Тест
    testraduacevolumeifmin  аннулирует  публичный() {
        радио -радио = новое  радио ();
        radio.Set Текущий объем(0);
        радио.Уменьшить объем ();
        ожидаемый  результат = 0;
        фактический  int = radio.getCurrentVolume();
        Утверждения.Значения утверждений (ожидаемые, фактические);

    }

    @Тест
    Увеличьте  значение теста, если больше всего аннулирует  public() {
        радио -радио = новое  радио ();
        радио.Установить текущий объем (12);
        радио.Уменьшить объем ();
        ожидаемый  результат = 0;
        фактический  int = radio.getCurrentVolume();
        Утверждения.Значения утверждений (ожидаемые, фактические);
    }
}
